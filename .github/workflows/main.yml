name: Executar PowerShell no GitHub Actions

on:
  push:
    branches:
      - main

jobs:
  run_powershell:
    runs-on: windows-latest  # Usa o runner do Windows, onde o PowerShell é nativo

    steps:
      - name: Check out o repositório
        uses: actions/checkout@v2  # Faz o checkout do código

      - name: Configurar variáveis de ambiente para FTP
        run: |
          echo "FTP_HOST=ftp://actidesenvolvimento.com" >> $GITHUB_ENV
          echo "FTP_USER=u787840538.actidesenvolvimento.com.br" >> $GITHUB_ENV
          echo "FTP_PWD=P@ssw0rd013459" >> $GITHUB_ENV

      - name: Executar comandos PowerShell
        shell: pwsh  # Especifica que o shell a ser usado será o PowerShell (pwsh para PowerShell Core)
        run: |
          Write-Host "Executando PowerShell no GitHub Actions!"
          $data = Get-Date
          Write-Host "Data atual: $data"
          
          # Listar arquivos do repositório
          Write-Host "Listando os arquivos do repositório:"
          Get-ChildItem -Path . | ForEach-Object { Write-Host $_.Name }

          # Credenciais FTP de variáveis de ambiente
          $ftpHost = $env:FTP_HOST
          $ftpUser = $env:FTP_USER
          $ftpPwd = $env:FTP_PWD
          
          # Diretório local com os arquivos do repositório
          $sourceDir = "."

          # Função para criar diretório FTP, se não existir
          function Create-FtpDirectoryIfNeeded($ftpUri, $ftpUser, $ftpPwd) {
              try {
                  Write-Host "Verificando e criando diretório FTP: $ftpUri"
                  $ftpRequest = [System.Net.FtpWebRequest]::Create($ftpUri)
                  $ftpRequest.Method = [System.Net.WebRequestMethods+Ftp]::MakeDirectory
                  $ftpRequest.Credentials = New-Object System.Net.NetworkCredential($ftpUser, $ftpPwd)
                  $ftpRequest.UseBinary = $true
                  $ftpRequest.KeepAlive = $false

                  $response = $ftpRequest.GetResponse()
                  $response.Close()
                  Write-Host "Diretório criado ou já existe: $ftpUri"
              }
              catch {
                  Write-Host "Falha ao criar diretório: $ftpUri. Detalhes do erro: $_"
              }
          }

          # Função para enviar arquivos para o FTP
          function Upload-ToFtp($sourceFile, $ftpUri, $ftpUser, $ftpPwd) {
              try {
                  Write-Host "Enviando arquivo para o FTP: $sourceFile"
                  $ftpRequest = [System.Net.FtpWebRequest]::Create($ftpUri)
                  $ftpRequest.Method = [System.Net.WebRequestMethods+Ftp]::UploadFile
                  $ftpRequest.Credentials = New-Object System.Net.NetworkCredential($ftpUser, $ftpPwd)
                  $ftpRequest.UseBinary = $true
                  $ftpRequest.KeepAlive = $false

                  $fileContents = [System.IO.File]::ReadAllBytes($sourceFile)
                  $ftpRequest.ContentLength = $fileContents.Length

                  $requestStream = $ftpRequest.GetRequestStream()
                  $requestStream.Write($fileContents, 0, $fileContents.Length)
                  $requestStream.Close()
                  
                  Write-Host "Arquivo $sourceFile enviado com sucesso!"
              }
              catch {
                  Write-Host "Erro ao enviar o arquivo $sourceFile: $_"
              }
          }

          # Criar diretórios necessários no FTP
          Create-FtpDirectoryIfNeeded "ftp://actidesenvolvimento.com/public_html" $ftpUser $ftpPwd
          Create-FtpDirectoryIfNeeded "ftp://actidesenvolvimento.com/public_html/teste_deploy" $ftpUser $ftpPwd

          # Enviar todos os arquivos do repositório para o FTP
          $files = Get-ChildItem -Path $sourceDir -File
          foreach ($file in $files) {
              $ftpUri = "ftp://actidesenvolvimento.com/public_html/teste_deploy/$($file.Name)"
              Upload-ToFtp $file.FullName $ftpUri $ftpUser $ftpPwd
          }

          Write-Host "Arquivos enviados para o servidor FTP com sucesso!"
